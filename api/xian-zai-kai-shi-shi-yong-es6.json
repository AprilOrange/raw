{
    "ord": 2,
    "title": "现在开始使用 ES6",
    "slug": "xian-zai-kai-shi-shi-yong-es6",
    "content": "<p>在 2 月 20 号 ECMAScript 第六版就正式推出了，这门语言一直保持稳定快速的发展而且新功能也在慢慢被现在主流的 JavaScript 引擎所接受。不过要想在浏览器端或者 Node 端直接运行 ES6 代码还得等上一些日子。幸好 TC39 (负责研究开发 EMCAScript 规格的组织) 做了大量工作让我们现在可以使用 ES6 中的大部分特性了。</p>\n<h2 id=\"-\">代码转换</h2>\n<p>能够实现 ES6 到 ES5 的代码转换多亏了 <a href=\"https://babeljs.io/\">Babel</a> (以前叫 6to5) 以及 Traceur 之类的项目。这些转换器 (更准确地说是源代码到源代码的编译器) 可以把你写的符合 ECMAScript 6 标准的代码完美地转换为 ECMAScript 5 标准的代码，并且可以确保良好地运行在所有主流 JavaScript 引擎中。</p>\n<p>我们这里目前在使用 Babel，主要是因为它对 ES6 的支持程度比其它同类<a href=\"https://kangax.github.io/compat-table/es6/#babel\">更高</a>，而且 Babel 拥有完善的文档和一个很棒的<a href=\"https://babeljs.io/repl/\">在线交互式编程环境</a>。</p>\n<h2 id=\"-\">起步</h2>\n<p>在用 ES6 标准开始一个新项目的时候我们会建立一个目录结构来确保用 ES6 编写的代码能和编译出的 ES5 代码区分开。原始的 ES6 代码我们放在 <code>src</code> 目录下，而编译好的文件就是 <code>lib</code> 目录。这样的命名我们会在本文一直使用。（补充一点，<code>lib</code> 目录应该被加入 <code>.gitignore</code> 文件中）</p>\n<h3 id=\"-babel\">安装 Babel</h3>\n<p>如果你还没安装 Babel 可以使用 <a href=\"(https://www.npmjs.org\">npm</a> 来安装：</p>\n<pre><code class=\"lang-bash\">npm install -g babel\n</code></pre>\n<p>Babel 一旦安装完成就可以开始编译你的 ES6 代码了。再确认一遍你已经在 <code>src</code> 目录放入了一些 ES6 文件，下面的命令将会把这个目录下所有 <code>.es6</code>, <code>.es</code> 和 <code>.js</code> 后缀的文件编译成符合 ES5 规范的代码到 <code>lib</code> 目录下：</p>\n<pre><code class=\"lang-bash\">babel -d lib/ src/\n</code></pre>\n<p>如果你想在文件有改动的时候自动完成这些编译工作可以使用这些常用的 JavaScript 构建工具：<a href=\"https://github.com/babel/grunt-babel\">Grunt</a>, <a href=\"https://github.com/babel/gulp-babel\">Gulp</a> 和 <a href=\"https://github.com/babel/broccoli-babel-transpiler\">Brocolli</a>.</p>\n<h3 id=\"-es6-\">给 ES6 标准库一个&quot;腻子&quot;</h3>\n<p>Babel 作为一个源到源的编译器不可能呈现所有 ES6 标准库中的新特性，例如 <code>Map</code> 和 <code>Set</code> 构造器和 <code>Array</code> 下的一些新方法。要使用这些我们需要一个&quot;腻子&quot;来填补这些不足。现在有很多 ES6 的腻子比如 <a href=\"https://github.com/zloirock/core-js\">core-js</a>，它适用于 Node, io.js 和浏览器。</p>\n<blockquote>\n<p>译者注: 本节原始标题为 Polyfilling the standard library，术语 polyfill 来自于一个家装产品Polyfilla:</p>\n<p>Polyfilla 是一个英国产品，在美国称之为 Spackling Paste (刮墙的,在中国称为腻子)。记住这一点就行: 把旧的浏览器想象成为一面有了裂缝的墙.这些 polyfill 会帮助我们把这面墙的裂缝抹平,还我们一个更好的光滑的墙壁 (浏览器)</p>\n</blockquote>\n<h2 id=\"-es6-\">编写 ES6 代码</h2>\n<p>现在构建 ES6 代码的工具已经备齐了那我们就开始真正有趣的部分。我们不会过多着眼于某个新特性，如果你有需要可以阅读 <a href=\"https://github.com/lukehoban\">Luke Hoban</a> 的 <a href=\"https://github.com/lukehoban/es6features\">feature list</a>.</p>\n<p>我们先在 <code>src</code> 目录下创建一个叫 <code>person.es6</code> 的文件：</p>\n<pre><code class=\"lang-javascript\">import &#39;core-js/shim&#39;;\n\nexport default class Person {\n\n  constructor( name ) {\n    this.name = name;\n  }\n\n  sayHello() {\n    return <code>Hello ${ this.name }!</code>;\n  }\n\n  sayHelloThreeTimes() {\n    let hello = this.sayHello();\n    return <code>${ hello }</code>.repeat(3);\n  }\n}\n</code></pre>\n<p>在这个很简单的例子中我们用了数个需要 Babel 来解决兼容性的语法，还有一个新的方法 <code>String#repeat</code> 须要由 core-js 处理。你可以用本文开头给出的 Babel 命令行代码或者用 <a href=\"http://ow.ly/JJyhz\">REPL</a> 得到运行结果。</p>\n<h3 id=\"-npm\">发布到 npm</h3>\n<p>目前为止我们可以编写、编译和运行 ES6 代码，不过你也许还想把你的代码发布到 npm 上。你显然不能直接发布然后期望每个人都来自己编译一次。</p>\n<p>幸好，npm 允许你在发布前用 <a href=\"https://docs.npmjs.com/misc/scripts\"><code>prepublish</code> script</a> 选项来修改，这个特性在 CoffeeScript 项目中已经被广泛使用了。</p>\n<p>现在把 <code>package.json</code> 文件加入到项目根目录中：</p>\n<pre><code class=\"lang-json\">{\n  &quot;name&quot;: &quot;person&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;scripts&quot;: {\n    &quot;compile&quot;: &quot;babel -d lib/ src/&quot;,\n    &quot;prepublish&quot;: &quot;npm run compile&quot;\n  },\n  &quot;main&quot;: &quot;lib/person.js&quot;,\n  &quot;dependencies&quot;: {\n    &quot;core-js&quot;: &quot;^0.6.0&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;babel&quot;: &quot;^4.6.0&quot;\n  }\n}\n</code></pre>\n<p>注意这个 <code>compile</code> script 会直接运行你在右边提供 Babel 命令，这样你就可以直接运行 <code>npm run compile</code> 来编译而不需要键入文件目录了，而 <code>prepublish</code> script 会在你每次执行 <code>npm publish</code> 的时候自动运行。</p>\n<p>还有就是为什么 Babel 会被加入 development dependencies 中，这样如果有人想参与这个项目就不用全局安装 Babel 了，npm 会在项目下的 <code>node_modules</code> 目录中加入相关的可执行文件。</p>\n<h3 id=\"-npmignore-\">.npmignore 文件</h3>\n<p>最后你需要确保发布的是编译出的文件而不是原始的 ES6 文件。如果你的项目根目录有 <code>.gitignore</code> 而没有 <code>.npmignore</code> 那 npm 就会自动忽略你项目中包含在 <code>.gitignore</code> 里所有的 文件和目录。添加 <code>.npmignore</code> 这样你发布的包里就是编译好的文件：</p>\n<pre><code>src/\n</code></pre><h2 id=\"-\">总结</h2>\n<ul>\n<li>编写 ES6 代码并使用源到源的编译器如 <a href=\"https://babeljs.io/\">Babel</a> 或者 <a href=\"https://github.com/google/traceur-compiler\">Traceur</a> 来转换成标准 ES5 代码</li>\n<li>使用 ES6 标准库腻子如 <a href=\"https://github.com/zloirock/core-js\">core-js</a></li>\n<li>记得在发布到 npm 的时候添加 <code>.npmignore</code> 文件</li>\n</ul>\n<p>你可以在我们的 <a href=\"https://github.com/mammaldev/update-couch-designs\">update-couch-designs</a> 项目中看到一个完整的例子，这个项目是我们用于更新和新建 CouchDB 设计文档的简单脚本。</p>\n<p>翻译自 <a href=\"http://mammal.io/articles/using-es6-today/\">Using ES6 with npm today</a></p>\n",
    "atime": "2015-03-18T13:02:13.000Z"
}